{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_LIGHT","App","useState","sortField","setSortField","sortedLength","setSortedLength","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAmB,WAwBlB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EA3BR,SAA0BC,EAA1B,GAA2E,IAAxCP,EAAuC,EAAvCA,UAAWE,EAA4B,EAA5BA,aAAcE,EAAc,EAAdA,WACtDI,EAAa,YAAOD,GAkBxB,MAhBkB,UAAdP,IACFQ,EAAgB,YAAIA,GAAeC,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,OAIrB,WAAjBT,IACFM,EAAgB,YAAIA,GAAeC,MACjC,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,WAIvCT,IACFI,EAAgB,YAAIA,GAAeM,WAG9BN,EAQcO,CAAiBnB,EACpC,CAAEI,YAAWE,eAAcE,eAE7B,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAyB,UAAdhB,EAAwB,iBAAxB,yBACWH,GACtBqB,QAAS,WACPjB,EAAa,SACbE,EAAgB,KANpB,iCAYA,wBACEc,KAAK,SACLD,UAA4B,WAAjBd,EAA4B,oBAA5B,4BACcL,GACzBqB,QAAS,WACPf,EAAgB,UAChBF,EAAa,KANjB,4BAYA,wBACEgB,KAAK,SACLD,UAAWZ,EACP,oBADiB,4BAEIP,GACzBqB,QAAS,kBAAMb,GAAc,SAAAc,GAAI,OAAKA,MALxC,sBAUEnB,GAAaE,GAAgBE,IAC7B,wBACEa,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPjB,EAAa,IACbE,EAAgB,IAChBE,EAAc,KANlB,sBAcJ,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCtGjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a12d6b68.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_LIGHT = 'is-light';\n\nfunction getPreparedGoods(goods, { sortField, sortedLength, isReversed }) {\n  let preparedGoods = [...goods];\n\n  if (sortField === 'alpha') {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.localeCompare(good2),\n    );\n  }\n\n  if (sortedLength === 'length') {\n    preparedGoods = [...preparedGoods].sort(\n      (good1, good2) => good1.length - good2.length,\n    );\n  }\n\n  if (isReversed) {\n    preparedGoods = [...preparedGoods].reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [sortedLength, setSortedLength] = useState('');\n  const [isReversed, setIsReversed] = useState('');\n\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, sortedLength, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === 'alpha' ? 'button is-info'\n            : `button is-info ${SORT_FIELD_LIGHT}`}\n          onClick={() => {\n            setSortField('alpha');\n            setSortedLength('');\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortedLength === 'length' ? 'button is-success'\n            : `button is-success ${SORT_FIELD_LIGHT}`}\n          onClick={() => {\n            setSortedLength('length');\n            setSortField('');\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : `button is-warning ${SORT_FIELD_LIGHT}`}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortedLength || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setSortedLength('');\n              setIsReversed('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}